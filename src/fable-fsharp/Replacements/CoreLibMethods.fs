// AUTOMATICALLY GENERATED FILE - DO NOT EDIT
module Fable.CoreLibMethods

let staticMethods =
    [
        "Choice", set [ "length"; "name"; "prototype" ]
        "TimeSpan", set [ "fromTicks"; "create"; "fromDays"; "fromHours"; "fromMinutes"; "fromSeconds"; "days"; "hours"; "minutes"; "seconds"; "milliseconds"; "ticks"; "totalDays"; "totalHours"; "totalMinutes"; "totalSeconds"; "duration"; "negate"; "add"; "subtract"; "compare"; "compareTo" ]
        "Date", set [ "minValue"; "maxValue"; "parse"; "create"; "now"; "utcNow"; "today"; "isLeapYear"; "daysInMonth"; "toUniversalTime"; "toLocalTime"; "timeOfDay"; "date"; "day"; "hour"; "millisecond"; "minute"; "month"; "second"; "year"; "toBinary"; "ticks"; "dayOfWeek"; "dayOfYear"; "op_Addition"; "add"; "addDays"; "addHours"; "addMinutes"; "addSeconds"; "addMilliseconds"; "addTicks"; "addYears"; "addMonths"; "op_Subtraction"; "subtract"; "toLongDateString"; "toShortDateString"; "toLongTimeString"; "toShortTimeString"; "equals"; "compare"; "compareTo" ]
        "Timer", set [ "length"; "name"; "prototype" ]
        "String", set [ "fsFormatRegExp"; "fsFormat"; "formatRegExp"; "format"; "init"; "isNullOrEmpty"; "isNullOrWhiteSpace"; "padLeft"; "padRight"; "replace"; "replicate"; "split"; "concat"; "join"; "endsWith" ]
        "RegExp", set [ "create"; "escape"; "unescape"; "isMatch"; "match"; "matches"; "options"; "replace"; "split" ]
        "Array", set [ "addRangeInPlace"; "blit"; "partition"; "permute"; "removeInPlace"; "setSlice"; "sortInPlaceBy"; "unzip"; "unzip3" ]
        "List", set [ "length"; "name"; "prototype"; "ofArray"; "append"; "choose"; "collect"; "concat"; "where"; "filter"; "init"; "map"; "mapi"; "partition"; "replicate"; "rev"; "singleton"; "slice"; "unzip"; "unzip3" ]
        "Seq", set [ "toList"; "ofList"; "ofArray"; "append"; "average"; "averageBy"; "countBy"; "concat"; "collect"; "choose"; "compareWith"; "delay"; "distinctBy"; "distinct"; "empty"; "enumerateWhile"; "enumerateThenFinally"; "enumerateUsing"; "exactlyOne"; "exists"; "exists2"; "where"; "filter"; "fold"; "foldBack"; "fold2"; "foldBack2"; "forall"; "forall2"; "groupBy"; "tryHead"; "head"; "init"; "initInfinite"; "tryItem"; "item"; "iter"; "iter2"; "iteri"; "iteri2"; "isEmpty"; "tryLast"; "last"; "length"; "map"; "mapi"; "map2"; "mapi2"; "map3"; "max"; "maxBy"; "min"; "minBy"; "pairwise"; "permute"; "rangeStep"; "rangeChar"; "range"; "readonly"; "reduce"; "reduceBack"; "replicate"; "rev"; "scan"; "scanBack"; "singleton"; "skip"; "skipWhile"; "sort"; "sortWith"; "sortBy"; "sortDescending"; "sortByDescending"; "sum"; "sumBy"; "tail"; "take"; "truncate"; "takeWhile"; "tryFind"; "find"; "tryFindBack"; "findBack"; "tryFindIndex"; "findIndex"; "tryFindIndexBack"; "findIndexBack"; "tryPick"; "pick"; "unfold"; "zip"; "zip3" ]
        "Set", set [ "ofArray"; "ofSeq"; "union"; "op_Addition"; "unionMany"; "difference"; "op_Subtraction"; "intersect"; "intersectMany"; "isProperSubset"; "isProperSubsetOf"; "isSubset"; "isSubsetOf"; "isProperSuperset"; "isProperSupersetOf"; "isSuperset"; "isSupersetOf"; "copyTo"; "partition"; "removeInPlace"; "remove" ]
        "Map", set [ "ofArray"; "ofSeq"; "containsValue"; "exists"; "filter"; "fold"; "foldBack"; "forall"; "iter"; "map"; "partition"; "findKey"; "tryFindKey"; "pick"; "removeInPlace"; "remove"; "tryPick" ]
        "Async", set [ "bind"; "combine"; "delay"; "for"; "return"; "returnFrom"; "tryFinally"; "tryWith"; "using"; "while"; "zero"; "startWithContinuations"; "startImmediate"; "start"; "ignore"; "cancellationToken"; "fromContinuations"; "startAsPromise"; "awaitPromise"; "parallel"; "catch"; "sleep" ]
        "Observable", set [ "map"; "choose"; "filter"; "partition"; "scan"; "add"; "subscribe"; "pairwise"; "merge"; "split" ]
        "Event", set [ "length"; "name"; "prototype"; "add"; "map"; "choose"; "filter"; "partition"; "scan"; "pairwise"; "merge"; "split" ]
    ] |> Map